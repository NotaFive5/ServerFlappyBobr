import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';
import { Low, JSONFile } from 'lowdb';
import path from 'path';
import { fileURLToPath } from 'url';
import crypto from 'crypto';
import rateLimit from 'express-rate-limit';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–∏ –¥–ª—è ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbFile = path.join(__dirname, 'db.json');
const adapter = new JSONFile(dbFile);
const db = new Low(adapter);

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function initDB() {
    await db.read();
    db.data ||= { scores: [], referrals: [] }; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    await db.write();
}
initDB();

// –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è HMAC
const SECRET_KEY = process.env.SECRET_KEY || 'YOUR_SECRET_KEY';

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (Rate Limiting)
const scoreLimiter = rateLimit({
    windowMs: 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
    max: 10, // –Ω–µ –±–æ–ª–µ–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    message: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
});
app.use('/api/score', scoreLimiter);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ HMAC
function validateSignature(req, res, next) {
    const signature = req.headers['x-signature'];
    const payload = JSON.stringify(req.body);
    const expectedSignature = crypto.createHmac('sha256', SECRET_KEY).update(payload).digest('hex');

    if (signature !== expectedSignature) {
        console.error('–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞.');
        return res.status(403).json({ error: "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å" });
    }
    next();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
function generateReferralCode(username) {
    return crypto.createHash('sha256').update(username + Date.now()).digest('hex').slice(0, 8);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getReferralCode(username) {
    await db.read();
    const user = db.data.scores.find(user => user.username === username);
    if (user && user.referral_code) {
        return user.referral_code;
    }
    return null;
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
async function registerUser(username, score, referredBy = null) {
    await db.read();
    const referralCode = generateReferralCode(username);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É scores
    db.data.scores.push({ username, score, referral_code: referralCode, invited_by: referredBy, invited_users: [] });
    await db.write();

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    if (referredBy) {
        const referrer = db.data.scores.find(user => user.referral_code === referredBy);
        if (referrer) {
            referrer.invited_users.push(username);
            await db.write();
        }
    }

    return referralCode;
}

// üö¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Å—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user_score/:username', async (req, res) => {
    const { username } = req.params;
    await db.read();

    const userData = db.data.scores.find(user => user.username === username);
    if (userData) {
        res.json({ best_score: userData.score });
    } else {
        res.json({ best_score: 0 });
    }
});

// üö¶ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–∫–æ—Ä–¥–∞
app.post('/api/score', validateSignature, async (req, res) => {
    try {
        const { username, score, referredBy } = req.body;

        if (!username || typeof score !== 'number' || score <= 0) {
            return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
        }

        await db.read();
        const existingUser = db.data.scores.find(user => user.username === username);

        if (existingUser) {
            if (score > existingUser.score) {
                existingUser.score = score;
                await db.write();
            }
        } else {
            await registerUser(username, score, referredBy);
        }

        res.json({ success: true });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /api/score:', error);
        res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// üö¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
app.get('/api/referral_link/:username', async (req, res) => {
    const { username } = req.params;
    const referralCode = await getReferralCode(username);

    if (referralCode) {
        res.json({ referral_link: `https://t.me/–≤–∞—à_–±–æ—Ç?start=${referralCode}` });
    } else {
        res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
}).on('error', (err) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', err);
});
