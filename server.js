import logging
import requests
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
import os
import asyncio
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = os.getenv('API_TOKEN')  # –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
SERVER_URL = 'https://serverflappybobr-production.up.railway.app'  # –ü—É–±–ª–∏—á–Ω—ã–π URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞

if not API_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω API_TOKEN! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

# üö¶ **–°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã**
ikb_scoreResult = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ú–æ–∏ –æ—á–∫–∏', callback_data="my_score")],
    [InlineKeyboardButton(text='–¢–æ–ø 10', callback_data="leaderboard_10")],
    [InlineKeyboardButton(text='–¢–æ–ø 20', callback_data="leaderboard_20")]
])

# üö¶ **–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–æ–º–∞–Ω–¥ —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞**
commands_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–µ–Ω—é")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É"
)

# üö¶ **–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–¥–ª—è /start)**
@router.message(Command(commands=["start"]))
async def send_start_message(message: Message):
    welcome_text = (
        "üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –º–∏—Ä –±–æ–±—Ä–æ–≤! üêæ\n\n"
        "üéÆ –≠—Ç–∞ –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ @BKRVCoin, "
        "—á—Ç–æ–±—ã –ø–æ–¥–∞—Ä–∏—Ç—å –≤–∞–º —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ —ç–º–æ—Ü–∏–∏!\n\n"
        "üíé –ò–≥—Ä–∞–π, –ø–æ–±–µ–∂–¥–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π! –í–ø–µ—Ä–µ–¥–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–≤–µ—Å—Ç–æ–≤, —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π "
        "–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –æ—Ç @BKRVCoin.\n\n"
        "üöÄ –ù–∞—á–Ω–∏ —Å–≤–æ—ë –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ–∫—É–Ω–∏—Å—å –≤ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä –±–æ–±—Ä–æ–≤!"
    )
    
    await message.reply(
        welcome_text,
        reply_markup=commands_keyboard
    )

# üö¶ **–°–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ (–¥–ª—è "–ú–µ–Ω—é")**
@router.message(lambda message: message.text == "–ú–µ–Ω—é")
async def send_hi(message: Message):
    await message.reply(
        "–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –∑–¥–µ—Å—å:",
        reply_markup=ikb_scoreResult
    )

# üö¶ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏**
@router.callback_query()
async def handle_callback_query(callback_query: CallbackQuery):
    data = callback_query.data

    if data == "my_score":
        await send_my_score(callback_query)
    elif data == "leaderboard_10":
        await send_leaderboard(callback_query, limit=10)
    elif data == "leaderboard_20":
        await send_leaderboard(callback_query, limit=20)

    await callback_query.answer()

# üö¶ **–í—ã–≤–æ–¥ –ª—É—á—à–µ–≥–æ —Å—á—ë—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
async def send_my_score(callback_query: CallbackQuery):
    username = callback_query.from_user.username
    if not username:
        await callback_query.answer(
            "–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username –≤ Telegram. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.",
            show_alert=True
        )
        return

    try:
        response = requests.get(f"{SERVER_URL}/api/user_score/{username}", timeout=10)
        response.raise_for_status()

        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {response.text}")

    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    data = response.json()
    best_score = data.get("best_score", 0)
    await callback_query.message.answer(f"–í–∞—à –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_score} –æ—á–∫–æ–≤.")

# üö¶ **–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤**
async def send_leaderboard(callback_query: CallbackQuery, limit: int = 10):
    try:
        response = requests.get(f"{SERVER_URL}/api/leaderboard?limit={limit}", timeout=10)
        response.raise_for_status()

        leaderboard = response.json()

        if not leaderboard:
            await callback_query.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.", show_alert=True)
            return

        leaderboard_text = "üèÜ <b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:</b>\n\n"
        for index, entry in enumerate(leaderboard, start=1):
            username = entry.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            score = entry.get("score", 0)
            leaderboard_text += f"{index}. @{username}: {score}\n"

        await callback_query.message.answer(leaderboard_text, parse_mode="HTML")

    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# üö¶ **–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞**
async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
