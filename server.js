// –ò—Å–ø–æ–ª—å–∑—É–µ–º ES Module —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤–º–µ—Å—Ç–æ require
import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';
import { Low, JSONFile } from 'lowdb';
import path from 'path';
import { fileURLToPath } from 'url';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–∏ –¥–ª—è ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbFile = path.join(__dirname, 'db.json');
const adapter = new JSONFile(dbFile);
const db = new Low(adapter);

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function initDB() {
    await db.read();
    db.data ||= { scores: [] };
    await db.write();
}
initDB();

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(bodyParser.json());

// üö¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Å—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user_score/:username', async (req, res) => {
    const { username } = req.params;
    await db.read();

    const userData = db.data.scores.find(user => user.username === username);
    if (userData) {
        res.json({ best_score: userData.score });
    } else {
        res.json({ best_score: 0 });
    }
});

// üö¶ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–∫–æ—Ä–¥–∞
app.post('/api/score', async (req, res) => {
    const { username, score } = req.body;

    if (!username || !score) {
        return res.status(400).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å username –∏ score" });
    }

    await db.read();
    const existingUser = db.data.scores.find(user => user.username === username);

    if (existingUser) {
        if (score > existingUser.score) {
            existingUser.score = score;
            await db.write();
            console.log(`–û–±–Ω–æ–≤–ª–µ–Ω —Ä–µ–∫–æ—Ä–¥ –¥–ª—è ${username}: ${score}`);
        }
    } else {
        db.data.scores.push({ username, score });
        await db.write();
        console.log(`–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫ ${username} —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º ${score}`);
    }

    res.json({ success: true });
});

// üö¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ (—Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤)
app.get('/api/leaderboard', async (req, res) => {
    await db.read();

    const leaderboard = db.data.scores
        .sort((a, b) => b.score - a.score)
        .slice(0, 10);

    res.json(leaderboard);
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
